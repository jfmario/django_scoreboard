# Generated by Django 2.0.1 on 2018-01-17 21:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend_name', models.CharField(help_text='Verbose name for admin use.', max_length=64)),
                ('name', models.CharField(max_length=64)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Experimental'), (2, 'Published')], default=0)),
                ('question', models.TextField(help_text='Markdown Field')),
                ('hint', models.TextField(help_text='Markdown Field', null=True)),
                ('question_type', models.IntegerField(choices=[(0, 'Short Answer'), (1, 'Multiple Choice'), (2, 'Regular Expression')], default=0)),
                ('short_answer', models.CharField(blank=True, help_text="Use for 'Short Answer' and 'Multiple Choice' questions.", max_length=128, null=True)),
                ('multiple_choice_options', models.TextField(blank=True, default='Option 1\nOption 2\nOption3\nOption4', help_text='Put one choice per line.')),
                ('regex_input_type', models.IntegerField(choices=[(0, 'Text'), (1, 'Textarea')], default=0, help_text="How should users input their answers for 'Regular Expression' questions?")),
                ('regex_answer', models.CharField(blank=True, help_text="Regular expression to test answer against for 'Regular Expression' questions.", max_length=128, null=True)),
                ('points', models.IntegerField(default=10)),
                ('hint_cost', models.IntegerField(default=2)),
                ('wrong_answer_cost', models.IntegerField(default=1)),
                ('challenge_unlock_min_points', models.IntegerField(default=0)),
                ('data_file', models.FileField(blank=True, help_text='If the challenges needs multiple files, zip them up.', null=True, upload_to='uploads/%Y/%m/%d/')),
                ('challenge_unlock_dependencies', models.ManyToManyField(blank=True, to='main.Challenge')),
            ],
        ),
        migrations.CreateModel(
            name='ChallengeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend_name', models.CharField(help_text='Verbose name for admin use.', max_length=64)),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(help_text='Markdown Field')),
                ('challenges', models.ManyToManyField(to='main.Challenge')),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend_name', models.CharField(help_text='Verbose name for admin use.', max_length=64)),
                ('name', models.CharField(max_length=64)),
                ('use_custom_description', models.BooleanField(help_text='If unchecked, description from the competition schema will be used.')),
                ('custom_description', models.TextField(blank=True, help_text='Markdown Field', null=True)),
                ('use_custom_welcome_message', models.BooleanField(help_text='If unchecked, welcome message from the competition schema will be used.')),
                ('custom_welcome_message', models.TextField(blank=True, help_text='Markdown Field', null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('is_open', models.BooleanField(default=True, help_text='If unchecked, users will be unable to register for this or access this unless they are already assigned to this.')),
            ],
        ),
        migrations.CreateModel(
            name='CompetitionSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backend_name', models.CharField(help_text='Verbose name for admin use.', max_length=64)),
                ('name', models.CharField(max_length=64)),
                ('default_description', models.TextField(help_text='Markdown Field')),
                ('default_welcome_message', models.TextField(help_text='Markdown Field')),
                ('challenge_groups', models.ManyToManyField(to='main.ChallengeGroup')),
            ],
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_branding', models.CharField(default='Scoreboard', max_length=32)),
                ('welcome_title', models.CharField(default='Welcome to the Scoreboard', max_length=64)),
                ('welcome_message', models.TextField(default='Please come on in and register for a competition.', help_text='Markdown Field')),
            ],
            options={
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='UserParticipationRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0)),
                ('challenges_solved', models.ManyToManyField(to='main.Challenge')),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Competition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='competition',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.CompetitionSchema'),
        ),
        migrations.AddField(
            model_name='competition',
            name='users',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
    ]
